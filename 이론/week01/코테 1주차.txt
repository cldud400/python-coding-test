.strip() 양끝의 공백을 없애준다
''
"" 문자열
[] 리스트
{} SET 순서와 중복이 없다.
   DICT Key:value 형태의 시퀀스
() 튜플 원본메모리 변경X

문자열을 출력할 때 format를 자주사용하자

sample[-1] 마지막원소의 인덱스는 -1이다
sample[1:4] 두번째원소 이상 다섯번째원소 미만

시퀀스 타입
1. mutable(가변)
-리스트


2.immutable(불가변)
-튜플 : 원소들이 변하지 않음을 보장
튜플이 슬라이싱이 가능한 이유는 원본 메모리가 변하지는 않기때문
tuple[0] = 10 같이 원본의 값을 바꾸는게 안됨

함수
메서드 : 클래스 내에 정의된 함수

append(x) : 시퀀스의 끝에 x 를 추가합니다([ ]포함해서 전체)
"sample.append([60])" = [10, 20, [60]]
extend(60) : 60의 내용으로 함수를 확장합니다
"sample.extend([60])" = "sample += [60]" = "sample = sample + [60]"

sample.pop([i]) : i에 있는 항목을 꺼냄과 동시에 제거 


사소한 것의 차이

- 파이썬에서 자료의 타입은 어떤 기호를 사용하느냐에 따라 결정된다.     
- ', "인 경우 문자열을 뜻하며,     
- [ 인 경우 리스트를, ( 인 경우 튜플을, { 인 경우 set을, {key:value} 형태이면 dict 타입으로 결정이 된다.    
- 아주 사소하지만, 자료의 타입을 결정하는 매우 중요한 요소인데, 사소해서 간과하기 쉽다는 문제가 있다.     
- 아무런 기호를 사용하지 않으면, 메모리 이거나, 숫자이다. 


입출력
input : 입력받은 모든 값은 문자열 형태로 돌려준다.
숫자, \n 등등 불가

파일 입출력
file = open('/root/sample.txt', mode = 'r') 읽기모드로 파일 생성
file.close

with open('/root/sample.txt', mode = 'r') as file:
    print( file.read() )

with를 사용하면 close를 사용하지 않아도 된다